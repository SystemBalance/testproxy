<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "proxy".
 *
 * @property int $id
 * @property int|null $ip
 * @property int|null $port
 *
 * @property ProxyCheckResult[] $proxyCheckResults
 */
class Proxy extends \yii\db\ActiveRecord
{

    /**
     * Проверяет наличие прокси в общем списке.
     * Необходима для получения полного списка Proxy отправленных на проверку.
     * можно переделать на isNewRecord()
     *
     * @param $ip
     * @param $port
     * @return Proxy|null
     * @throws \yii\base\InvalidConfigException
     */
    public static function getByIpPort($ip, $port)
    {
        return self::findByCondition(['ip' => ip2long($ip), 'port' => $port])->limit(1)->one();
    }


    public function beforeSave($insert)
    {
        // Раскомментировать если при любом заливе перепроверяем все прокси.
        // В данном случае необходимо подправить логику добавления в пул проверок.(ProxyService и SiteController)
        //For duplicates
//        if(self::findByCondition(['ip'=>$this->ip,'port'=>$this->port])->exists())
//        return false;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return int|null
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * @param int|null $port
     */
    public function setPort($port)
    {
        $this->port = $port;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'proxy';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['ip', 'port'], 'integer'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'ip' => 'Ip',
            'port' => 'Port',
        ];
    }

    /**
     * Gets query for [[ProxyCheckResults]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getProxyCheckResults()
    {
        return $this->hasMany(ProxyCheckResult::className(), ['proxy_id' => 'id']);
    }

    /**
     * @return string|int
     */
    public function getIp()
    {
        return long2ip($this->ip);
    }

    /**
     * @param $ip
     */
    public function setIp($ip)
    {
        $this->ip = ip2long($ip);
    }
}
